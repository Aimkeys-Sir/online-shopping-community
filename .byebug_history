c
decode_token[0]["user_id"]
decode_token[0][:user_id]
decode_token[0]
decode_token
user_id
c
user
c
request.headers["Authorization"]
c
JWT.decode(a,"bReachers&ecret",true,algorithm:"HS256")
a=request.headers["Authorization"].split(" ").last
request.headers["Authorization"]
request.headers
request
continue
articles
c
ap ebay
cards
c
ap articles
c
ap @pages[:ebay]
ap @pages[:amazon]
ap @pages[:jumia]
c
amazon
jumia
ebay
c
cards.length
c
continue
raw
ap cards
c
            }
                search_id: @search_id
                shop:"ebay",
                coupon_discount: card.xpath(".//span[@class='NEGATIVE BOLD']/text()").to_s,
                shipping:card.xpath(".//span[@class='s-item__shipping s-item__logisticsCost']/text()").to_s,
                return_policy:card.xpath(".//span[@class='s-item__free-returns s-item__freeReturnsNoFee']/text()").to_s,
                rated_products:"",
                ratings:"",
                discount: card.xpath(".//span[@class='BOLD']/text()").to_s,
                price_before_discount: card.xpath(".//span[@class='STRIKETHROUGH']/text()").to_s,
                price:card.xpath(".//span[@class='s-item__price']/text()").to_s,
                name:card.xpath(".//span[@role='heading']/text()").to_s,
                image_url:card.xpath(".//img[@class='s-item__image-img']").attr("src").to_s,
            {
cards.map do |card|
cards.length
ap cards[1].xpath(".//img[@class='s-item__image-img']")
cards
raw
c
cards
c
ap cards
